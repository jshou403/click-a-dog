{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","components/Instructions/index.js","components/Score/index.js","components/DogCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Header","id","Instructions","Score","highScore","score","DogCard","dog","onClick","src","image","alt","name","insta","App","state","doggosState","doggos","clickedDogs","shuffleCards","setState","sort","Math","random","resetGameStats","whenClicked","includes","alert","push","scoreTracker","this","map","doggo","imageUrl","key","handle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8gEAOeA,MAJf,SAAiBC,GACb,OAAO,yBAAKC,UAAU,aAAaD,EAAME,W,MCU9BC,MAXf,WACI,OACI,6BACI,gCAAQ,gDACR,yBAAKC,GAAG,YACJ,0H,MCKDC,MAVf,WACI,OACI,yBAAKJ,UAAU,SACX,yBAAKG,GAAG,gBACJ,yCADJ,IACuB,iH,MCSpBE,MAbf,SAAeN,GACX,OACI,yBAAKC,UAAU,2BACX,6BACI,2CAAiBD,EAAMO,YAE3B,6BACI,8CAAoBP,EAAMQ,U,MCS3BC,MAZf,SAAiBC,GACb,OACI,yBAAKT,UAAU,+CACXU,QAAS,kBAAMD,EAAIC,QAAQD,EAAIN,MAC/B,yBAAKQ,IAAKF,EAAIG,MAAOZ,UAAU,eAAeG,GAAIM,EAAIN,GAAIU,IAAKJ,EAAIK,OACnE,yBAAKd,UAAU,6BACX,wBAAIA,UAAU,6BAA6BS,EAAIK,KAA/C,KAAuDL,EAAIM,MAA3D,QCkHDC,E,2MAnHbC,MAAQ,CACNC,YAAaC,EACbZ,MAAO,EACPD,UAAW,EACXc,YAAa,I,EAGfC,aAAe,WACb,EAAKC,SAAS,CAAEJ,YAAa,EAAKD,MAAMC,YAAYK,MAAK,kBAAMC,KAAKC,SAAW,S,EAGjFC,eAAiB,WACf,EAAKJ,SAAS,CAAEf,MAAO,IACvB,EAAKe,SAAS,CAAEF,YAAa,M,EAI/BO,YAAc,SAAAxB,GAIZ,EAAKkB,eAJa,IAOVd,EAAU,EAAKU,MAAfV,MACAD,EAAc,EAAKW,MAAnBX,UAGR,GAAI,EAAKW,MAAMG,YAAYQ,SAASzB,GAKlC0B,MAAM,uEAGN,EAAKH,qBAIA,CAML,EAAKT,MAAMG,YAAYU,KAAK3B,GAK5B,IAAI4B,EAAexB,EAAQ,EAC3B,EAAKe,SAAS,CAAEf,MAAOwB,IAQnBA,EAHmBzB,GAUrB,EAAKgB,SAAS,CAAEhB,UAAWyB,IAGN,KAAjBA,IACFF,MAAM,2EACN,EAAKH,mBAGmB,KAAjBK,IAITF,MAAM,sGACN,EAAKH,oB,wEAKD,IAAD,OAEP,OACE,kBAAC,EAAD,KAEE,kBAAC,EAAD,MAEA,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOM,UAAW0B,KAAKf,MAAMX,UAAWC,MAAOyB,KAAKf,MAAMV,SAG5D,kBAAC,EAAD,KACE,yBAAKP,UAAU,OACZgC,KAAKf,MAAMC,YAAYe,KAAI,SAAAC,GAAK,OAC/B,kBAAC,EAAD,CACAxB,QAAS,kBAAM,EAAKiB,YAAYO,EAAM/B,KACtCS,MAAOsB,EAAMC,SACbhC,GAAI+B,EAAM/B,GAAIiC,IAAKF,EAAM/B,GACzBW,KAAMoB,EAAMpB,KACZC,MAAOmB,EAAMnB,MAAMsB,mB,GA3GfC,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e954fff2.chunk.js","sourcesContent":["import React from 'react';\r\n// import './App.css';\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"container\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <header><h1>Pet the Doggos!</h1></header>\r\n            <div id=\"subtitle\">\r\n                <p>Here are some doggos that are waiting to be rescued. Show them some love by giving pets!</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Instructions() {\r\n    return (\r\n        <div className=\"col-8\">\r\n            <div id=\"instructions\">\r\n                <h3>Game Play</h3> <h5>You must be fair and pet each doggo once before giving any doggo a second pet.</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Instructions;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Score(props) {\r\n    return (\r\n        <div className=\"col-4 align-text-bottom\">\r\n            <div>\r\n                <h5>High Score: {props.highScore}</h5>\r\n            </div>\r\n            <div>\r\n                <h5>Current Score: {props.score}</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Score;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// dog = name of prop being passed in \r\n// image, id, name, insta, onClick = named on App.js\r\n// on App.js image=doggos.json key name which is imageUrl\r\n\r\nfunction DogCard(dog) {\r\n    return (\r\n        <div className=\"card col-3 border-0 rounded-0 p-0 doggo-card\"\r\n            onClick={() => dog.onClick(dog.id)}>\r\n            <img src={dog.image} className=\"card-img-top\" id={dog.id} alt={dog.name} />\r\n            <div className=\"card-body doggo-card-body\">\r\n                <h6 className=\"card-text doggo-card-text\">{dog.name} ({dog.insta})</h6>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DogCard;","import React from 'react';\n\n// importing Components for use on main page\nimport doggos from \"./doggos.json\";\nimport Wrapper from \"./components/Wrapper\"\nimport Header from \"./components/Header\";\nimport Instructions from \"./components/Instructions\";\nimport Score from \"./components/Score\";\nimport DogCard from \"./components/DogCard\";\n\nclass App extends React.Component {\n\n  state = {\n    doggosState: doggos,\n    score: 0,\n    highScore: 0,\n    clickedDogs: []\n  }\n\n  shuffleCards = () => {\n    this.setState({ doggosState: this.state.doggosState.sort(() => Math.random() - 0.5) })\n  }\n\n  resetGameStats = () => {\n    this.setState({ score: 0 })\n    this.setState({ clickedDogs: [] })\n  }\n\n  // whenClicked is run when a doggoCard has been clicked.\n  whenClicked = id => {\n    // console.log(`\\n ID Clicked: ${id} \\n`);\n\n    // 1 - Shuffle the cards.\n    this.shuffleCards();\n\n    // 2 - Declare the states that we will update.\n    const { score } = this.state;\n    const { highScore } = this.state;\n\n    // 3 - Check if the id passed in from the doggoCard is already in the clickedDogs array.\n    if (this.state.clickedDogs.includes(id)) {\n      // 3A // If id IS IN array... \n      // 3A - Display loss alert.\n      // 3A - Reset score and array.\n\n      alert(\"You pet this dog already! You lose this round but please try again!\");\n      // console.log(`GAME OVER\\nALREADY in array: ${this.state.clickedDogs}`);\n\n      this.resetGameStats();\n      // this.setState({ score: 0 })\n      // this.setState({ clickedDogs: [] })\n\n    } else {\n      // 3B // If id is NOT in array... \n      // 3B - Add it to the clickedDogs array.\n      // 3B - Increase the score by one. \n      // 3B - Check for high score. \n\n      this.state.clickedDogs.push(id);\n      // console.log(`Added to array: ${this.state.clickedDogs}`);\n\n      // let scoreTracker use the value of const score to add to score\n      // set the value of the score property to the value of the scoreTracker\n      let scoreTracker = score + 1;\n      this.setState({ score: scoreTracker });\n      // console.log(`\\nscoreTracker: ${scoreTracker}`);\n\n      // 3B - Check for high score.\n      // let highScoreTracker use the value of the const highScore\n      var highScoreTracker = highScore\n      // console.log(`highScoreTracker = ${highScoreTracker}`);\n\n      if (scoreTracker > highScoreTracker) {\n        // 3B 1 // If the current score > current high score... \n        // 3B 1 - Update the highScore to scoreTracker (current score).\n        // 3B 1 - Check if current score = 12... \n        //// Display win alert.\n        //// Reset score and array.\n\n        this.setState({ highScore: scoreTracker });\n        // console.log(`highScore = ${highScore}`);\n\n        if (scoreTracker === 12) {\n          alert(\"Yay! All the doggos are grateful for your pets! Want to give more pets?\")\n          this.resetGameStats();\n        }\n\n      } else if (scoreTracker === 12) {\n        // 3B 2 // If current score = 12... \n        // 3B 2 - Alert win.\n        // 3B 2 - Reset game stats.\n        alert(\"Yay! You pet all the doggos and all the doggos are grateful for your pets! Want to give more pets?\")\n        this.resetGameStats();\n      }\n    }\n  }\n\n  render() {\n    // console.log(doggos);\n    return (\n      <Wrapper>\n\n        <Header />\n\n        <div className=\"row\">\n          <Instructions />\n          <Score highScore={this.state.highScore} score={this.state.score} />\n        </div>\n\n        <Wrapper>\n          <div className=\"row\">\n            {this.state.doggosState.map(doggo => (\n              <DogCard \n              onClick={() => this.whenClicked(doggo.id)} \n              image={doggo.imageUrl} \n              id={doggo.id} key={doggo.id} \n              name={doggo.name} \n              insta={doggo.insta.handle} />\n            ))}\n          </div>\n        </Wrapper>\n        \n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}